pipeline {
    agent any

    environment {
        VIRTUAL_ENV = "venv"
        PYTHON = 'C:\\Users\\kunal\\AppData\\Local\\Programs\\Python\\Python313\\python.exe'
    }

    stages {
        stage("Git Clone") {
            steps {
                git(
                    credentialsId: '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',
                    branch: 'main',
                    url: 'https://github.com/kunalmundhe24/devopsproj.git'
                )
                bat "dir /s"  // Debugging: List files after cloning
            }
        }

        stage('Set Up Python Environment') {
            steps {
                bat '''
                    echo "üîπ Checking if Python is installed..."
                    python --version || exit /b 1

                    echo "üîπ Creating virtual environment..."
                    python -m venv venv

                    echo "üîπ Activating virtual environment..."
                    call venv\\Scripts\\activate

                    echo "üîπ Checking if requirements.txt exists..."
                    if not exist requirements.txt (
                        echo "‚ùå ERROR: requirements.txt not found!"
                        exit /b 1
                    )

                    echo "üîπ Installing dependencies..."
                    python -m pip install --upgrade pip
                    python -m pip install -r requirements.txt

                    if errorlevel 1 (
                        echo "‚ùå ERROR: Dependency installation failed!"
                        exit /b 1
                    )
                '''
            }
        }

        stage('Run Tests') {
            steps {
                bat '''
                    echo "üîπ Running Tests..."
                    call venv\\Scripts\\activate
                    pytest --junitxml=report.xml

                    if errorlevel 1 (
                        echo "‚ùå Tests Failed!"
                        exit /b 1
                    )
                '''
            }
        }

        stage('Docker Build & Deploy') {
            steps {
                bat '''
                    echo "üê≥ Stopping existing containers (if any)..."
                    docker-compose down || echo "No containers running."

                    echo "üê≥ Building and starting containers..."
                    docker-compose up --build -d

                    if errorlevel 1 (
                        echo "‚ùå Docker Compose failed!"
                        exit /b 1
                    )
                '''
            }
        }
    }

    post {
        always {
            junit 'report.xml'
        }
        failure {
            echo '‚ùå Pipeline failed!'
        }
        success {
            echo '‚úÖ Pipeline completed successfully! App deployed via Docker.'
        }
    }
}
